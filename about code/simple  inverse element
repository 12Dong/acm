#include<iostream>
#include<cmath>
#include<cstdio>
using namespace std;
const int MOD = 1e9+7;
const int Maxn = 1e6+10;
typedef long long ll;
ll f[Maxn],inv[Maxn];
//ll quick_multi(ll x,ll y)
//{
//	ll ans = 1;
//	while(y!=0)
//	{
//		if(y&1) ans=(ans*x)%MOD;
//		x=(x*x)%MOD;
//		y>>=1;
//	}
//	return ans;
//}
//void init()
//{
//	f[1]=1;
//	for(ll i=2;i<Maxn;i++) f[i]=f[i-1]*i%MOD;
//	inv[Maxn-1]=quick_multi(f[Maxn-1],MOD-2);
//	for(ll i=Maxn-2;i>=1;i--) inv[i]=inv[i+1]*(i+1)%MOD;
//}
ll quick_multi(ll a,ll b){  
    ll ans=1;  
    while(b){  
        if(b&1) ans=ans*a%MOD;  
        b>>=1;  
        a=a*a%MOD;  
    }  
    return ans ;  
}  
  
inline ll get_inverse(ll x){ //(a/b) % c = a*inv[b] %c if(c is a prime number) inv[b] = (b^(c-2))%c;  
    return quick_multi(x,MOD-2);  
}  
  
void init(){//½«[1,1e6+10]µÄÄæÔªÔ¤´¦Àí³öÀ´  
    for(ll i=1;i<Maxn;i++)  
        inv[i]=get_inverse(i);  
}  
ll n,m,k;
ll c[Maxn];
ll makec(ll q)
{
	c[0]=1;
	for(ll i=1;i<=k;i++) c[i]=(c[i-1]*(q-i+1)%MOD*inv[i])%MOD;
}
inline ll calc(ll x){// x*C(k,x)*(x-1)^(n-1)  
    return (c[x]*x%MOD)*quick_multi(x-1,n-1)%MOD;  
}  
  
int main(){  
    init();  
    int t,cas=1;  
    scanf("%d",&t);  
    while(t--){  
        scanf("%lld%lld%lld",&n,&m,&k);  
        makec(m);  
        ll ans = c[k],ans1=0,tag=1;  
        makec(k);  
        for(ll i=k;i>=1;i--){  
            ans1=(ans1+tag*calc(i)+MOD)%MOD;  
            tag=-tag;  
        }  
        ans=ans*ans1%MOD;  
        printf("Case #%d: %lld\n", cas++, ans);  
    }  
    return 0;  
}  
