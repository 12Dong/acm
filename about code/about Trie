#include<iostream>
#include<cstring>
#include<cstdio>
using namespace std;
const int Maxn=26;
char str[4010];
char output[4010];
char search[4010];
struct Trie
{
	Trie *Next[Maxn];
	int end;
	char str[15];
	Trie()
	{
		end=0;
		memset(Next,NULL,sizeof(Next));
		memset(str,'\0',sizeof(str));
	}
}*root;
void insert(char *str,char *realstr)
{
	int len = strlen(str);
	Trie *p=root,*q;
	for(int i=0;i<len;i++)
	{
		int id = str[i]-'a';
		if(p->Next[id]==NULL)
		{
			q = new Trie();
			p->Next[id]=q;
		}
		p = p->Next[id];
	}
	p->end ++ ;
	strcpy(p->str,realstr);
}
char* query(char *str)
{
	int len=strlen(str);
	Trie *p = root;
	for(int i=0;i<len;i++)
	{
		int id = str[i]-'a';
		if(p->Next[id]==NULL) return NULL;
		p = p->Next[id];
	}
	return (p->end?p->str:NULL);
}
void Free(Trie *T)
{
	for(int i=0;i<26;i++)
	{
		if(T->Next[i]!=NULL) Free(T->Next[i]);
	}
	delete(T);
}
int main()
{
	root = new Trie();
	char nouse[400];
	char realstr[400],marstr[400];
	scanf("%s",nouse);
	while(scanf("%s",realstr) && strcmp(realstr,"END")!=0)
	{
		scanf("%s",marstr);
		insert(marstr,realstr);
	}
	scanf("%s",nouse);
	getchar();
	while(gets(str) && strcmp(str,"END")!=0)
	{
		int len = strlen(str);
		int l=0;
		memset(output,0,sizeof(output));
		for(int i=0;i<len;i++)
		{
			if(str[i]>='a' && str[i]<='z')
			{
				search[l++]=str[i];
			}
			else
			{
				search[l++]='\0';
				l=0;
				char * tar = query(search);
				if(tar==NULL) strcat(output,search);
				else strcat(output,tar);
				output[strlen(output)]=str[i];
			}
		}
		printf("%s\n",output);
	}
	Free(root);
	return 0;
}
