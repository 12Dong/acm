//两种类型type作为要求
//type1 要求输出有k个小于且与x互素的数 且 x最小
//type0 要求输出有k个约数 且 x最小
#include<iostream>
#include<cstring>
using namespace std;
typedef long long ll;
const int Maxn=5e4,top=15;
const ll INF = ((ll)1<<62)+1;
ll ans;
int m,k,type,cnt;
int ip[Maxn+10];
int prime[100]={0,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47};
void makenotprime()
{
	for(int i=1;i<=Maxn;i++)
	{
		ip[i]+=i;
		for(int j=1;i*j<=Maxn;j++)
		{
			ip[i*j]--;
		}
		if(!ip[ip[i]]) ip[ip[i]]=i;
		ip[i]=0;
	}
}
// depth 当前深度 对应 基的值 limit 反素数性质 不得大于当前 tmp 当前已累积的值 num 当前已累积的约数
void dfs(int depth,int limit,ll tmp,int num)
{
	if(num==k && ans>tmp) ans = tmp;
	if(num>=k || (depth>=top)) return;
	for(int i=1;i<=limit;i++)
	{
		if(tmp>ans/prime[depth]) return;
		if(num*(i+1)>k) return;
		tmp *=prime[depth];
		if(k%(num*(i+1)) == 0)  
			dfs(depth+1,i,tmp,num*(i+1));
	}
}
int main()
{
	makenotprime();
	int t;
	int ka=0;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d%d",&type,&k);
		if(type==1)
		{
			ans = ip[k];
		}
		else
		{
			ans = INF;
			dfs(1,64,1,1);
		}
		printf("Case %d: ",++ka);
		if(ans==0) printf("Illegal\n");
		else if(ans>=INF) printf("INF\n");
		else printf("%I64d\n",ans);
	}
}
