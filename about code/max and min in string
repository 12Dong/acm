#include<iostream>
#include<string>
#include<cstring>
using namespace std;
const int MAXN = 1e6+5;
char x[MAXN*2];
char y[MAXN*2];
char s[MAXN*2];
int Next[MAXN];
void KMP_Pre(char y[],int m,int next[])
{
	int i,j;
	j=next[0]=-1;
	i=0;
	while(i<m)
	{
		while(j!=-1 && y[i]!=y[j])
		{
			j=next[j];
		}
		next[++i]=++j;
	}
	return ;
}
int GetMin(char s[],int n)
{
	int i=0,j=1;
	while(i<n && j<n)
	{
		int k=0;
		while(s[i+k]==s[j+k] && k<n) k++;
		if(k==n) break;
		if(s[i+k]<s[j+k])
		{
			if(j+k>i) j=j+k+1;
			else j=i+1;
		}
		else
		{
			if(i+k>j) i=i+k+1;
			else i=j+1;
		}
	}
	return min(i,j);
 } 
int GetMax(char s[],int n) // 同构循环串求最大
{
	
	//返回字典序最小的下标 
	int i=0,j=1;
	while(i<n && j<n)
	{
		int k=0;
		while(s[i+k] == s[j+k] && k<n)  k++;
		if(k == n) break;
		if(s[i+k]>s[j+k])
		{
			if(j+k>i) j=j+k+1;
			else j=i+1;
		}
		else
		{
			if(i+k>j) i=i+k+1;
			else i=j+1;
		}
	}
	return min(i,j); 
}
int main()
{
	while(~scanf("%s",y))
	{
		int m=strlen(y);
		strcpy(s,y);
		strcat(s,y);
		KMP_Pre(y,m,Next);
		int repetend =m- Next[m];
		if(repetend!=m && m%repetend==0) 
		{
			repetend = m/repetend;
		}
		else repetend=1;
		printf("%d %d %d %d\n",GetMin(s,m)+1,repetend,GetMax(s,m)+1,repetend);
	}
}
