#include<cstdio>  
#include<cstring>  
#include<algorithm>  
using namespace std;  
const int maxn=1000000+100;  
struct SuffixArray  
{  
    char s[maxn];  
    int sa[maxn],rank[maxn],height[maxn];  
    int t1[maxn],t2[maxn],c[maxn],n;  
    int dmin[maxn];  
    void build_sa(int m)  
    {  
        int i,*x=t1,*y=t2;  
        for(i=0;i<m;i++) c[i]=0;  
        for(i=0;i<n;i++) c[x[i]=s[i]]++;  
        for(i=1;i<m;i++) c[i]+=c[i-1];  
        for(i=n-1;i>=0;i--) sa[--c[x[i]]]=i;  
        for(int k=1;k<=n;k<<=1)  
        {  
            int p=0;  
            for(i=n-k;i<n;i++) y[p++]=i;  
            for(i=0;i<n;i++)if(sa[i]>=k) y[p++]=sa[i]-k;  
            for(i=0;i<m;i++) c[i]=0;  
            for(i=0;i<n;i++) c[x[y[i]]]++;  
            for(i=1;i<m;i++) c[i]+=c[i-1];  
            for(i=n-1;i>=0;i--) sa[--c[x[y[i]]]] = y[i];  
            swap(x,y);  
            p=1,x[sa[0]]=0;  
            for(i=1;i<n;i++)  
                x[sa[i]]= y[sa[i]]==y[sa[i-1]]&&y[sa[i]+k]==y[sa[i-1]+k]? p-1:p++;  
            if(p>=n) break;  
            m=p;  
        }  
    }  
    void build_height()  
    {  
        int i,j,k=0;  
        for(i=0;i<n;i++)rank[sa[i]]=i;  
        for(i=0;i<n;i++)  
        {  
            if(k)k--;  
            j=sa[rank[i]-1];  
            while(s[i+k]==s[j+k])k++;  
            height[rank[i]]=k;  
        }  
    }  
    void initMin()  
    {  
        int min_v=1e8;  
        for(int i=rank[0];i>1;i--)//求1到rank[0] 之间的最小值height  
        {  
            min_v=min(min_v,height[i]);  
            dmin[i-1]=min_v;  
        }  
        min_v=1e8;  
        for(int i=rank[0]+1;i<n;i++)//求rank[0]到n-1 之间的最小值height  
        {  
            min_v=min(min_v,height[i]);  
            dmin[i]=min_v;  
        }  
    }  
    int LCP(int j)//求后缀i和j的LCP最长公共前缀  
    {  
        int R=rank[j];  
        return dmin[R];  
    }  
}sa;  
int main()  
{  
    while(scanf("%s",sa.s)==1)  
    {  
        int len = strlen(sa.s);  
        if(len==1 && strcmp(sa.s,".")==0) break;  
        sa.n=len+1;  
        sa.s[len]=0;  
        sa.build_sa(128);  
        sa.build_height();  
        sa.initMin();  
        bool ok=false;  
        for(int i=1;i<=len/2;i++)if(len%i==0)  
        {  
            int lcp=sa.LCP(i);//其实应该是LCP(0,i)  
            if(lcp==len-i)  
            {  
                printf("%d\n",len/i);  
                ok=true;  
                break;  
            }  
        }  
        if(ok==false) printf("1\n");  
    }  
    return 0;  
}  
